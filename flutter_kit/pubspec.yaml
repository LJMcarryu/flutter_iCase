name: flutter_kit
description: "A new Flutter project."
publish_to: 'none' # Remove this line if you wish to publish to pub.dev
version: 1.0.0+1

environment:
  sdk: '>=3.4.3 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

# 状态管理
# provider、GetX、flutter_bloc 三选一 https://docs.flutter.cn/community/tutorials/state-management-package-getx-provider-analysis
#
# GetX：是 Flutter 上的一个轻量且强大的解决方案：高性能的状态管理、智能的依赖注入和便捷的路由管理
# GetX是一个强大的Flutter状态管理库，其最大的特点是提供了响应式编程的能力。这意味着当状态发生变化时，相关的UI组件会自动更新。GetX还提供了一站式解决方案，包括状态管理、导航、依赖注入和国际化等。此外，GetX非常灵活，你可以只使用你需要的功能，比如只使用状态管理而不使用路由管理。
# 然而，GetX也有一些潜在的缺点。例如，它提供了许多抽象，这可能会隐藏Flutter框架的一些核心概念。此外，虽然GetX社区正在不断增长，但它还没有像Provider或Bloc那样广泛的接受度。如果你的项目不需要那么多功能，GetX可能会显得过于复杂。
#
# Provider：对 InheritedWidget 组件的上层封装，使其更易用，更易复用
# Provider是Flutter官方推荐的状态管理解决方案之一。它通过共享数据模型（通常是ChangeNotifier或其子类）来管理状态。Provider的主要优点是简单易用，而且与Flutter的架构非常契合。你可以在任何widget中使用Provider来访问和修改状态。
# 然而，Provider在处理非父子组件之间的状态共享时可能会遇到一些困难。为了解决这个问题，开发者通常需要借助其他工具，如EventBus、全局变量或单例。
#
# Bloc：Flutter Widgets 可轻松实现 BLoC（业务逻辑组件）设计模式。专为与 bloc 状态管理包一起使用而构建
# Bloc是一个基于事件驱动的状态管理库。在Bloc中，状态的变化是通过触发事件并处理这些事件来实现的。这种模型类似于MVVM架构中的ViewModel。Bloc非常安全和高效，但是相对复杂，对于初学者来说可能需要一些时间来理解。
# Bloc的主要优点是它提供了清晰的状态流和事件流，使得状态管理更加可预测和可测试。此外，Bloc还提供了丰富的中间件支持，可以用于处理如缓存、错误处理等任务。

#  provider: ^6.1.2
  get: ^4.6.6
#  flutter_bloc: ^8.1.6
  # 一个反应式缓存和数据绑定框架
#  riverpod: ^2.5.1

  # 用于 HTTP 请求的可组合、多平台、基于 Future 的 API
  http: ^1.2.1
  # 强大的 HTTP 网络包，支持拦截器、中止和取消请求、自定义适配器、变压器等
  dio: ^5.5.0+1

  # 用于数据类 / 联合体 / 模式匹配 / 克隆的代码生成器
  freezed_annotation: ^2.4.3
  json_annotation: ^4.9.0

  # 低功耗蓝牙插件
  flutter_blue_plus: ^1.32.8

  # 一组用于 Dart 的加密散列函数
  crypto: ^3.0.3

  # 用于读取和写入简单键值对的 Flutter 插件。
  # 包装 iOS 上的 NSUserDefaults 和 Android 上的 SharedPreferences
  shared_preferences: ^2.2.3
  # 一个轻量级且速度超快的键值数据库，用纯 Dart 编写
#  hive: ^2.2.3

  # 用于启动 URL 的 Flutter 插件
  url_launcher: ^6.3.0
  # A Flutter plugin that provides a WebView widget on Android and iOS.
#  webview_flutter: ^4.8.0

  # 地理定位插件
#  geolocator: ^12.0.0
  # 处理在 Android 和 iOS 上获取位置信息。它还会在位置发生变化时提供回调。
#  location: ^7.0.0

 # Toast 库
  fluttertoast: ^8.2.6
  # 一款简洁轻量的 Flutter 加载/toast 小部件
  flutter_easyloading: ^3.0.5
  # 小型、易于使用且可扩展的记录器，可打印漂亮的日志
  logger: ^2.3.0
  # 高级的错误处理程序和记录器
  talker: ^4.3.2
  talker_dio_logger: ^4.3.2

# 用于创建模糊时间戳的库
#  timeago: ^3.7.0

  # 用于显示来自互联网的图像并将其保存在缓存目录中
#  cached_network_image: ^3.3.1

  # 用于显示本地通知的跨平台插件
#  flutter_local_notifications: ^17.2.1+1
  # 使用 Flutter 上的自定义本地和推送通知吸引用户。
  # 获取实时事件，并借助 Awesome Notifications 绝不会错过任何用户互动。
#  awesome_notifications: ^0.9.3+1

  # 一个适配屏幕和字体大小的 Flutter 插件，保证在不同机型上都能正常显示
  flutter_screenutil: ^5.9.3
  # 添加闪光效果的简单方法
#  shimmer: ^3.0.0
  # 包含一系列炫酷文本动画的 Flutter 包
#  animated_text_kit: ^4.2.2
  # 精美的预建动画可以轻松集成到任何 Flutter 应用程序中
#  animations: ^2.0.11
  # 每个动画都是一个可定制的小部件
#  animate_do: ^3.3.4
  # 一个高性能库，可以轻松在 Flutter 中添加几乎任何类型的动画效果。
#  flutter_animate: ^4.5.0

  # 用于查找文件系统上的常用位置
#  path_provider: ^2.1.3
  # 该软件包允许您使用本机文件资源管理器选择单个或多个绝对文件路径，并支持扩展名过滤。
#  file_picker: ^8.0.6
  # 权限插件
  permission_handler: ^11.3.1
  # 用于发现 Android 和 iOS 上的网络（WiFi 和移动/蜂窝）连接状态
#  connectivity_plus: ^6.0.3
  # 提供有关设备（品牌、型号等）以及应用程序所运行的 Android 或 iOS 版本的详细信息
#  device_info_plus: ^10.1.0
  # 用于查询应用程序包信息的 Flutter 插件，例如 iOS 上的 CFBundleVersion 或 Android 上的 versionCode
#  package_info_plus: ^8.0.0

# 强大的插件使下载文件变得容易
#  flutter_downloader: ^1.11.7

  # 使用背景颜色和启动画面自定义 Flutter 默认的白色原生启动画面。支持暗黑模式、全屏等
#  flutter_native_splash: ^2.4.1
  # 该包可简化更新 Flutter 应用启动器图标的任务
#  flutter_launcher_icons: ^0.13.1
  # 用于使用来自 fonts.google.com 的字体。支持 HTTP 获取、缓存和资产捆绑
#  google_fonts: ^6.2.1
  # 简介屏幕允许您在应用首次启动时显示一个屏幕
#  introduction_screen: ^3.1.14
  # 用于逐步展示/突出显示小部件
#  showcaseview: ^3.0.0

  # 一个提供给 Flutter 滚动组件下拉刷新和上拉加载的 widget
  pull_to_refresh: ^2.0.0
  # 用于从 Android 和 iOS 图片库中选择图像，并使用相机拍摄新照片
#  image_picker: ^1.1.2
  # 一个简单的可缩放 Flutter 图像/内容小部件
#  photo_view: ^0.15.0
  # 适用于 Android、iOS 和 Web 的 Flutter 插件支持裁剪图像
#  image_cropper: ^7.1.0

  # 创建出色且功能强大的模态底部页面
  modal_bottom_sheet: ^3.0.0
  # 可滑动列表项的 Flutter 实现，具有可关闭的定向滑动操作
  flutter_slidable: ^3.1.0
  # 可拖动的 Flutter 小部件使实现 SlidingUpPanel 变得更加容易！
#  sliding_up_panel: ^2.0.0+1

  # 旋转滑块小部件 轮播
#  carousel_slider: ^4.2.1
  # 可定制的动画页面指示器，具有一组内置效果。
#  smooth_page_indicator: ^1.1.0

  # 圆形和线性百分比指示器
  percent_indicator: ^4.2.3

  # 提供 Flutter 网格布局集合（交错、砌体、绗缝、编织等）。
#  flutter_staggered_grid_view: ^0.7.0
  # 一组使用 Flutter 动画的加载指示器
#  flutter_spinkit: ^5.2.1
  # 用于创建徽章的软件包
#  badges: ^3.1.2
  # 高度可定制、功能丰富的 Flutter 日历小部件
#  table_calendar: ^3.1.2

  # 以简单的方式为 Android/iOS 键盘添加功能
#  keyboard_actions: ^4.2.0

  # 用于您的资产、字体、颜色等的 Flutter 代码生成器——摆脱所有基于字符串的 API
#  flutter_gen: ^5.6.0

  # 无需额外努力即可将已构建的小部件转换为骨架加载器
#  skeletonizer: ^1.3.0

  # 让五彩缤纷的纸屑洒满整个屏幕
#  confetti: ^0.7.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints:

  # 用于数据类 / 联合体 / 模式匹配 / 克隆的代码生成器
  build_runner: ^2.4.11
  freezed: ^2.5.2
  json_serializable: ^6.8.0

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true